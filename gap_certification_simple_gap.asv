%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This code simulates Scenario-Based Gap Robustness Numerical Illustration
%
% Copyrights Authors: Venkatraman Renganathan 
%                     Cranfield University, United Kingdom.
%
% Emails: v.renganathan@cranfield.ac.uk
%
% Date last updated: 7 July, 2025.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% gap_certification_simple_gap.m
% Simulate gap metric between state-space systems under random θ with simpler nominal model

% Make a fresh start
clear; close all; clc;

% set properties for plotting
set(groot,'defaultAxesTickLabelInterpreter','latex');  
set(groot,'defaulttextinterpreter','latex');
set(groot,'defaultLegendInterpreter','latex');
addpath(genpath('src'));

% ------------------------
% Nominal system: simple stable first-order system
% ------------------------
A = -1;
B = 1;
C = 1;
D = 0;

P_nom = ss(A, B, C, D);

% ------------------------
% Simulation parameters
% ------------------------
p = 1;                          % One-dimensional θ
mu_theta = 0.0;                 % Nominal parameter
sigma_theta = 0.25;
N = 1000;                       % Number of samples
gap_values = zeros(1, N);
theta_norms = zeros(1, N);
% ------------------------
% Gap computation loop
% ------------------------
for i = 1:N
    theta = normrnd(mu_theta, sigma_theta);

    % Perturb the A matrix slightly (ensure stability)
    A_pert = A + theta;        % Small perturbation around stable pole
    if A_pert >= 0              % skip unstable systems
        gap_values(i) = NaN;
        continue;
    end

    P_theta = ss(A_pert, B, C, D);

    try
        % Compare with Matlab inbuilt gapmetric command
        [g,~] = gapmetric(tf(P_nom),tf(P_theta));
        % g = nugap(tf(P_nom), tf(P_theta));
        theta_norms(i) = norm(theta);
    catch
        g = NaN;
    end

    gap_values(i) = g;
end

% Remove NaNs
gap_values = gap_values(~isnan(gap_values));
N_valid = length(gap_values);
theta_norms = theta_norms(1:N_valid);


% ------------------------
% Empirical and theoretical stats
% ------------------------
expected_gap = mean(gap_values);
% Estimate Lipschitz constant of gap as Gap/theta_norm
L_gap_est = mean(gap_values ./ theta_norms);
sigma_gap = L_gap_est * sigma_theta;

C = 1; % Controller stabilizing nominal system
P_nom_tf = tf(P_nom);
sen = 1/(1+P_nom_tf*C);
b_PC = norm(1-sen,inf);

% b_PC = mu_gap + 0.05;
epsilon = b_PC - expected_gap;

empirical_prob = mean(gap_values < b_PC);
theoretical_bound = 1 - exp(-epsilon^2 / (2 * sigma_gap^2));

% ------------------------
% Display summary
% ------------------------
fprintf('\n--- Simple Gap Metric Simulation ---\n');
fprintf('Valid Samples:                    %d\n', N_valid);
fprintf('Expected[Gap]:                    %.4f\n', expected_gap);
fprintf('Robust Stability Margin b_PC:     %.4f\n', b_PC);
fprintf('Empirical P[Gap < b_PC]:          %.4f\n', empirical_prob);
fprintf('Theoretical Lower Bound:          %.4f\n', theoretical_bound);

% ------------------------
%% Plot
% ------------------------
figure;
histogram(gap_values, 40, 'Normalization', 'probability', 'FaceAlpha', 0.6);
hold on;
xline(b_PC, 'r--', 'LineWidth', 5);
xlabel('Gap($\theta$)');
ylabel('Probability Density');
legend('Empirical $\mathbf{f}_{\mathrm{gap}}$', '$b_{\bar{\Sigma}, \bar{C}}$');
grid on;
xlim([0, 1]);
a = findobj(gcf, 'type', 'axes');
h = findobj(gcf, 'type', 'line');
set(h, 'linewidth', 5);
set(a, 'linewidth', 5);
set(a, 'FontSize', 50);
set(gca,'fontweight','bold');